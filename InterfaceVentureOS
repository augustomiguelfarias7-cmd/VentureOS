package com.ventureos.ui

import javafx.animation.TranslateTransition
import javafx.application.Application
import javafx.application.Platform
import javafx.beans.property.SimpleBooleanProperty
import javafx.collections.FXCollections
import javafx.collections.ObservableList
import javafx.geometry.Insets
import javafx.geometry.Pos
import javafx.scene.Node
import javafx.scene.Scene
import javafx.scene.control.*
import javafx.scene.effect.DropShadow
import javafx.scene.input.KeyCode
import javafx.scene.layout.*
import javafx.scene.paint.Color
import javafx.scene.text.Font
import javafx.scene.text.FontWeight
import javafx.stage.Stage
import javafx.util.Duration
import java.util.*
import java.util.concurrent.Executors
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.TimeUnit
import kotlin.concurrent.thread

object Theme {
    val BACKGROUND = Color.web("#0D47A1")
    val SURFACE = Color.web("#1E1E1E")
    val SURFACE_ALT = Color.web("#333333")
    val PRIMARY = Color.web("#2196F3")
    val ON_SURFACE = Color.web("#FFFFFF")
    val ON_SURFACE_SECONDARY = Color.web("#A0A0A0")
}

data class OsApp(
    val id: String,
    val name: String,
    val description: String,
    val iconUnicode: String = "üì±",
    var installed: Boolean = false
)

data class NotificationItem(
    val id: String = UUID.randomUUID().toString(),
    val title: String,
    val content: String,
    var read: Boolean = false
)

object AppState {
    val apps: ObservableList<OsApp> = FXCollections.observableArrayList()
    val notifications: ObservableList<NotificationItem> = FXCollections.observableArrayList()
    val coppaMode = SimpleBooleanProperty(false)
    val scheduler = Executors.newSingleThreadScheduledExecutor()
    var clockTask: ScheduledFuture<*>? = null
}

fun nowTimeString(): String = java.time.LocalDateTime.now()
    .format(java.time.format.DateTimeFormatter.ofPattern("HH:mm"))

class TopStatusBar : HBox() {
    init {
        padding = Insets(8.0, 16.0, 8.0, 16.0)
        spacing = 16.0
        alignment = Pos.CENTER_RIGHT
        style = "-fx-background-color: ${Theme.SURFACE};"

        val clockLabel = Label(nowTimeString()).apply {
            font = Font.font("System", FontWeight.SEMI_BOLD, 16.0)
            textFill = Theme.ON_SURFACE
        }

        val spacer = Region().apply { HBox.setHgrow(this, Priority.ALWAYS) }
        children.addAll(spacer, clockLabel)

        AppState.clockTask?.cancel(true)
        AppState.clockTask = AppState.scheduler.scheduleAtFixedRate({
            Platform.runLater { clockLabel.text = nowTimeString() }
        }, 0, 1, TimeUnit.SECONDS)
    }
}

class NotificationBar(private val appManager: AppUIManager) : HBox() {
    init {
        padding = Insets(8.0)
        spacing = 20.0
        alignment = Pos.CENTER
        style = "-fx-background-color: ${Theme.SURFACE_ALT};"

        val volume = Label("üîä").apply { textFill = Theme.ON_SURFACE }
        val settings = Button("‚öôÔ∏è").apply {
            style = "-fx-background-color: transparent; -fx-font-size: 18;"
            setOnAction { appManager.openSettings() }
        }
        val browser = Button("üåê").apply {
            style = "-fx-background-color: transparent; -fx-font-size: 18;"
            setOnAction { appManager.openBrowser() }
        }

        children.addAll(volume, settings, browser)
    }
}

class AppTile(val app: OsApp, private val appManager: AppUIManager) : VBox() {
    init {
        prefWidth = 100.0
        prefHeight = 100.0
        alignment = Pos.CENTER
        spacing = 8.0
        style = "-fx-background-color: ${Theme.SURFACE_ALT}; -fx-background-radius: 16;"

        val icon = Label(app.iconUnicode).apply { font = Font.font(32.0) }
        val name = Label(app.name).apply {
            textFill = Theme.ON_SURFACE
            isWrapText = true
        }
        children.addAll(icon, name)

        setOnMouseClicked { appManager.openApp(app) }
        setOnMouseEntered { style = "-fx-background-color: rgba(255,255,255,0.1); -fx-background-radius: 16;" }
        setOnMouseExited { style = "-fx-background-color: ${Theme.SURFACE_ALT}; -fx-background-radius: 16;" }
    }
}

class AppUIManager(private val mainStack: StackPane) {
    private val viewStack = Stack<Node>()

    fun openApp(app: OsApp) {
        val content = VBox(12.0).apply {
            padding = Insets(16.0)
            children.add(Label("App: ${app.name}").apply {
                font = Font.font(18.0); textFill = Theme.ON_SURFACE
            })
        }
        showView(content)
    }

    fun openSettings() {
        val settingsView = VBox(12.0).apply {
            padding = Insets(16.0)
            style = "-fx-background-color: ${Theme.SURFACE};"
            children.add(Label("Configura√ß√µes do Sistema").apply { 
                font = Font.font(18.0); textFill = Theme.PRIMARY 
            })
            children.add(Label("Bateria: 84%").apply { textFill = Theme.PRIMARY })
            children.add(Label("Apps Favoritos").apply { textFill = Theme.PRIMARY })
            val browserBtn = Button("Abrir Navegador").apply { 
                setOnAction { openBrowser() } 
            }
            children.add(browserBtn)
        }
        showView(settingsView)
    }

    fun openBrowser() {
        val browserView = VBox(12.0).apply {
            padding = Insets(16.0)
            children.add(Label("Navegador Web (Firefox via S-Droid)").apply {
                font = Font.font(18.0); textFill = Theme.ON_SURFACE
            })
        }
        showView(browserView)
    }

    private fun showView(node: Node) {
        if (viewStack.isNotEmpty()) viewStack.peek().isVisible = false
        if (!mainStack.children.contains(node)) mainStack.children.add(node)
        node.isVisible = true
        viewStack.push(node)
    }

    fun goHome() {
        viewStack.forEach { it.isVisible = false }
        viewStack.clear()
        mainStack.children.first().isVisible = true
    }

    fun back() {
        if (viewStack.isNotEmpty()) {
            val current = viewStack.pop()
            current.isVisible = false
            if (viewStack.isNotEmpty()) viewStack.peek().isVisible = true
            else goHome()
        }
    }
}

class VentureOSApp : Application() {
    override fun start(primaryStage: Stage) {
        seedInitialData()

        primaryStage.title = "VentureOS"
        val mainStack = StackPane()
        val appManager = AppUIManager(mainStack)

        val homeScreen = BorderPane().apply {
            style = "-fx-background-color: ${Theme.BACKGROUND};"

            top = VBox(10.0).apply {
                children.addAll(
                    TopStatusBar(),
                    createSearchBar(appManager)
                )
            }

            center = createLauncherPane(appManager)
            bottom = NotificationBar(appManager)
        }

        mainStack.children.add(homeScreen)
        val scene = Scene(mainStack, 1024.0, 768.0)
        primaryStage.scene = scene
        primaryStage.show()
    }

    private fun seedInitialData() {
        if (AppState.apps.isEmpty()) {
            AppState.apps.addAll(
                OsApp("browser", "Firefox", "Navegador web", "üåê", true),
                OsApp("calc", "Calculadora", "Calculadora do sistema", "üßÆ", true),
                OsApp("music", "Music", "Player de m√∫sicas", "üéµ", true)
            )
        }
    }

    private fun createSearchBar(appManager: AppUIManager): HBox {
        val searchField = TextField().apply {
            promptText = "Pesquisar por aplicativos para baixar"
            style = "-fx-background-radius: 20; -fx-background-color: ${Theme.SURFACE}; -fx-text-fill: ${Theme.ON_SURFACE};"
            setOnKeyPressed { event ->
                if (event.code == KeyCode.ENTER) {
                    val query = text.trim()
                    if (query.isNotEmpty()) {
                        installApp(query)
                        text = ""
                    }
                }
            }
        }
        return HBox(searchField).apply { padding = Insets(10.0); alignment = Pos.CENTER; }
    }

    private fun installApp(name: String) {
        if (AppState.apps.none { it.name.equals(name, true) }) {
            val newApp = OsApp(UUID.randomUUID().toString(), name, "App instalado via pesquisa", "üì¶", true)
            AppState.apps.add(newApp)
            AppState.notifications.add(NotificationItem("Sistema", "App \"$name\" instalado!"))
        } else {
            AppState.notifications.add(NotificationItem("Sistema", "App \"$name\" j√° est√° instalado!"))
        }
    }

    private fun createLauncherPane(appManager: AppUIManager): FlowPane {
        val launcher = FlowPane().apply {
            hgap = 20.0
            vgap = 20.0
            padding = Insets(16.0)
        }
        AppState.apps.addListener { _ ->
            launcher.children.clear()
            launcher.children.addAll(AppState.apps.map { AppTile(it, appManager) })
        }
        launcher.children.addAll(AppState.apps.map { AppTile(it, appManager) })
        return launcher
    }
}

fun main() {
    Application.launch(VentureOSApp::class.java)
}

            
