// VentureOS_UI.kt
// Interface do sistema com inspira√ß√£o no Android ‚Äî por Augusto (Refatorado por Gemini)
// Requisitos: JDK 11+ e JavaFX
//
// Como compilar (exemplo com OpenJFX 17):
//   kotlink -classpath /caminho/para/libs/javafx/* -include-runtime -d VentureOS.jar VentureOS_UI.kt
//   java --module-path /caminho/para/libs/javafx --add-modules javafx.controls,javafx.fxml -jar VentureOS.jar
//
// Mudan√ßas da Refatora√ß√£o:
// - UI totalmente redesenhada para se assemelhar a uma interface de tablet Android.
// - Navega√ß√£o de tela √∫nica: apps abrem como "camadas" na janela principal, n√£o em novas janelas.
// - Adicionada Barra de Navega√ß√£o inferior (Voltar, Home, Recentes).
// - Painel de Notifica√ß√µes e Configura√ß√µes R√°pidas que desliza do topo.
// - Tema escuro (Material Design) com cores e sombras para uma apar√™ncia moderna.
// - Remo√ß√£o dos pain√©is laterais para um layout mais limpo e focado.
// - L√≥gica de estado (AppState) e modelos de dados foram mantidos.

package com.ventureos.ui

import javafx.animation.TranslateTransition
import javafx.application.Application
import javafx.application.Platform
import javafx.beans.property.*
import javafx.collections.FXCollections
import javafx.collections.ObservableList
import javafx.geometry.Insets
import javafx.geometry.Pos
import javafx.scene.Node
import javafx.scene.Scene
import javafx.scene.control.*
import javafx.scene.effect.DropShadow
import javafx.scene.input.KeyCode
import javafx.scene.layout.*
import javafx.scene.paint.Color
import javafx.scene.shape.Circle
import javafx.scene.shape.Rectangle
import javafx.scene.text.Font
import javafx.scene.text.FontWeight
import javafx.stage.Stage
import javafx.util.Duration
import java.io.File
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.*
import java.util.concurrent.Executors
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.TimeUnit

// ======= TEMA DE CORES (MATERIAL DESIGN) =======
object Theme {
    val BACKGROUND = Color.web("#121212") // Fundo escuro
    val SURFACE = Color.web("#1E1E1E")    // Cor de "superf√≠cies" como cards
    val PRIMARY = Color.web("#BB86FC")    // Cor de destaque principal
    val ON_SURFACE = Color.web("#FFFFFF")  // Cor do texto sobre superf√≠cies
    val ON_SURFACE_SECONDARY = Color.web("#A0A0A0") // Cor de texto secund√°rio
}

// ======= MODELS (Sem altera√ß√µes) =======
data class OsApp(
    val id: String,
    val name: String,
    val description: String,
    val iconUnicode: String = "üì±",
    val native: Boolean = true,
    var installed: Boolean = false
)

data class NotificationItem(
    val id: String = UUID.randomUUID().toString(),
    val title: String,
    val content: String,
    val timestamp: LocalDateTime = LocalDateTime.now(),
    var read: Boolean = false
)

data class UpdateItem(
    val id: String = UUID.randomUUID().toString(),
    val title: String,
    val details: String,
    var installed: Boolean = false
)

// ======= ESTADO GLOBAL (Sem altera√ß√µes na l√≥gica) =======
object AppState {
    val apps: ObservableList<OsApp> = FXCollections.observableArrayList()
    val notifications: ObservableList<NotificationItem> = FXCollections.observableArrayList()
    val updates: ObservableList<UpdateItem> = FXCollections.observableArrayList()
    val coppaMode = SimpleBooleanProperty(false)
    val yasaMode = SimpleBooleanProperty(false)
    private val firstBootFlag = File(System.getProperty("user.home"), ".ventureos_firstboot_done")
    fun isFirstBoot(): Boolean = !firstBootFlag.exists()
    fun markFirstBootDone() { try { firstBootFlag.createNewFile() } catch (_: Throwable) {} }
    val scheduler = Executors.newSingleThreadScheduledExecutor()
    var clockTask: ScheduledFuture<*>? = null
}

// ======= UTILIT√ÅRIOS (Sem altera√ß√µes) =======
fun nowTimeString(): String = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm"))
fun nowFullDateString(): String = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))
fun generateDefaultUpdates(): List<UpdateItem> {
    val names = listOf("NodeAtualizaJSON", "Seguran√ßa-Patch-092", "KernelBridge-Compat", "Atualiza-Seguranca-Critical")
    return names.map { UpdateItem(title = it, details = "Descri√ß√£o da atualiza√ß√£o $it.") }
}

// ======= COMPONENTES DE UI (Refatorados) =======

// --- Barra de Status Superior (estilo Android) ---
class TopStatusBar : HBox() {
    init {
        style = "-fx-background-color: transparent;"
        padding = Insets(8.0, 16.0, 8.0, 16.0)
        spacing = 16.0
        alignment = Pos.CENTER_RIGHT

        val clockLabel = Label(nowTimeString()).apply {
            font = Font.font("System", FontWeight.SEMI_BOLD, 16.0)
            textFill = Theme.ON_SURFACE
        }

        val wifiLabel = Label("üì∂").apply { textFill = Theme.ON_SURFACE }
        val batteryLabel = Label("üîã 84%").apply { textFill = Theme.ON_SURFACE }
        
        // Indicadores de modo
        val coppaIndicator = Label().apply {
            textFill = Theme.PRIMARY
            style = "-fx-font-size: 11px; -fx-font-weight: bold;"
            textProperty().bind(AppState.coppaMode.map { if (it) "COPPA" else "" })
        }
        val yasaIndicator = Label().apply {
            textFill = Color.CYAN
            style = "-fx-font-size: 11px; -fx-font-weight: bold;"
            textProperty().bind(AppState.yasaMode.map { if (it) "YASA" else "" })
        }

        val spacer = Region().apply { HBox.setHgrow(this, Priority.ALWAYS) }
        children.addAll(spacer, coppaIndicator, yasaIndicator, wifiLabel, batteryLabel, clockLabel)

        // Atualiza o rel√≥gio
        AppState.clockTask?.cancel(true)
        AppState.clockTask = AppState.scheduler.scheduleAtFixedRate({
            Platform.runLater { clockLabel.text = nowTimeString() }
        }, 0, 1, TimeUnit.SECONDS)
    }
}

// --- Painel de Notifica√ß√µes e Atalhos (Desliza do Topo) ---
class NotificationShade : VBox() {
    private var isOpen = false

    init {
        // Layout e Estilo
        padding = Insets(16.0)
        spacing = 12.0
        style = "-fx-background-color: #2A2A2A; -fx-background-radius: 0 0 20 20;"
        effect = DropShadow(20.0, Color.BLACK)
        
        // Deixa o painel fora da tela por padr√£o
        managedProperty().bind(visibleProperty())
        isVisible = false

        // 1. T√≠tulo e Bot√£o de Limpar
        val header = HBox().apply {
            alignment = Pos.CENTER_LEFT
            spacing = 10.0
            val title = Label("Notifica√ß√µes").apply {
                font = Font.font("System", FontWeight.BOLD, 20.0)
                textFill = Theme.ON_SURFACE
            }
            val spacer = Region().apply { HBox.setHgrow(this, Priority.ALWAYS) }
            val btnClear = Button("Limpar").apply {
                setOnAction { AppState.notifications.clear() }
            }
            children.addAll(title, spacer, btnClear)
        }

        // 2. Atalhos R√°pidos (Quick Settings)
        val quickSettingsGrid = FlowPane().apply {
            hgap = 10.0
            vgap = 10.0
            alignment = Pos.CENTER_LEFT
            children.addAll(
                createQuickSettingToggle("Wi-Fi üì∂", true),
                createQuickSettingToggle("Bluetooth  bluetooth", false),
                createQuickSettingToggle("N√£o Perturbe üåô", false)
            )
        }
        
        // 3. Lista de Notifica√ß√µes
        val notificationList = ListView<NotificationItem>().apply {
            style = "-fx-background-color: transparent;"
            setCellFactory { NotificationCell() }
            items = AppState.notifications
        }
        
        children.addAll(header, Separator(), quickSettingsGrid, Separator(), notificationList)
    }

    private fun createQuickSettingToggle(text: String, selected: Boolean) = ToggleButton(text).apply {
        isSelected = selected
        style = "-fx-background-radius: 15; -fx-pref-width: 120;"
    }

    fun toggle() {
        val transition = TranslateTransition(Duration.millis(300.0), this)
        if (isOpen) {
            transition.toY = -this.height
            transition.setOnFinished { isVisible = false }
        } else {
            isVisible = true
            transition.fromY = -this.height
            transition.toY = 0.0
        }
        transition.play()
        isOpen = !isOpen
    }

    // C√©lula customizada para a lista de notifica√ß√µes
    private class NotificationCell : ListCell<NotificationItem>() {
        override fun updateItem(item: NotificationItem?, empty: Boolean) {
            super.updateItem(item, empty)
            if (empty || item == null) {
                graphic = null
            } else {
                val title = Label(item.title).apply {
                    font = Font.font("System", FontWeight.BOLD, 14.0)
                    textFill = Theme.ON_SURFACE
                }
                val content = Label(item.content).apply {
                    isWrapText = true
                    textFill = Theme.ON_SURFACE_SECONDARY
                }
                val meta = Label(item.timestamp.format(DateTimeFormatter.ofPattern("HH:mm"))).apply {
                    style = "-fx-font-size: 10px; -fx-text-fill: #888;"
                }
                val textVBox = VBox(4.0, title, content)
                graphic = HBox(10.0, textVBox, meta).apply { padding = Insets(8.0) }
            }
        }
    }
}

// --- √çcone de App na Tela Inicial ---
class AppTile(val app: OsApp, private val appManager: AppUIManager) : VBox() {
    init {
        prefWidth = 100.0
        prefHeight = 100.0
        alignment = Pos.CENTER
        spacing = 8.0
        style = "-fx-background-color: transparent; -fx-background-radius: 16;"

        val icon = Label(app.iconUnicode).apply { font = Font.font(32.0) }
        val name = Label(app.name).apply {
            textFill = Theme.ON_SURFACE
            isWrapText = true
        }

        children.addAll(icon, name)

        setOnMouseClicked {
            appManager.openApp(app)
        }
        
        // Efeito de hover
        setOnMouseEntered { style = "-fx-background-color: rgba(255,255,255,0.1); -fx-background-radius: 16;" }
        setOnMouseExited { style = "-fx-background-color: transparent; -fx-background-radius: 16;" }
    }
}


// --- Barra de Navega√ß√£o Inferior ---
class NavigationBar(private val appManager: AppUIManager) : HBox() {
    init {
        padding = Insets(10.0)
        spacing = 20.0
        alignment = Pos.CENTER
        style = "-fx-background-color: #252525;"

        val backButton = createNavButton("‚óÄ") { appManager.back() }
        val homeButton = createNavButton("‚óè") { appManager.goHome() }
        val recentsButton = createNavButton("‚ñ†") { 
            // A√ß√£o de "Recentes" pode ser implementada futuramente
            AppState.notifications.add(0, NotificationItem("Sistema", "Visualiza√ß√£o de apps recentes ainda n√£o implementada."))
        }

        children.addAll(backButton, homeButton, recentsButton)
    }

    private fun createNavButton(icon: String, action: () -> Unit) = Button(icon).apply {
        style = "-fx-font-size: 16; -fx-background-color: transparent; -fx-text-fill: white;"
        setOnAction { action() }
    }
}


// --- Gerenciador da Interface dos Apps (Controla o que √© exibido) ---
class AppUIManager(private val mainStack: StackPane) {
    private val appViewCache = mutableMapOf<String, Node>()
    private val viewStack = Stack<Node>() // Pilha para o bot√£o "Voltar"

    fun openApp(app: OsApp) {
        val appView = appViewCache.getOrPut(app.id) {
            val content = when (app.id) {
                "settings-app" -> createSettingsAppContent()
                "store-app" -> createStoreAppContent()
                else -> createGenericAppContent(app)
            }
            // Adiciona um cabe√ßalho simples ao app
            BorderPane().apply {
                style = "-fx-background-color: ${Theme.BACKGROUND.toString().replace("0x", "#")};"
                top = HBox(Label(app.name)).apply {
                    padding = Insets(16.0)
                    style = "-fx-background-color: ${Theme.SURFACE.toString().replace("0x", "#")};"
                    (children.first() as Label).apply {
                        font = Font.font("System", FontWeight.BOLD, 18.0)
                        textFill = Theme.ON_SURFACE
                    }
                }
                center = content
            }
        }
        
        // Esconde a tela inicial e mostra o app
        mainStack.children.first().isVisible = false
        if (viewStack.isNotEmpty()) viewStack.peek().isVisible = false

        if (!mainStack.children.contains(appView)) {
            mainStack.children.add(appView)
        }
        appView.isVisible = true
        viewStack.push(appView)
    }

    fun goHome() {
        viewStack.forEach { it.isVisible = false }
        viewStack.clear()
        mainStack.children.first().isVisible = true // Mostra a tela inicial
    }

    fun back() {
        if (viewStack.isNotEmpty()) {
            val currentView = viewStack.pop()
            currentView.isVisible = false
            
            if(viewStack.isNotEmpty()) {
                viewStack.peek().isVisible = true
            } else {
                goHome() // Se n√£o houver mais nada na pilha, volta para home
            }
        }
    }

    // --- Conte√∫dos dos Apps ---
    private fun createGenericAppContent(app: OsApp) = VBox(12.0).apply {
        padding = Insets(16.0)
        children.addAll(
            Label("App: ${app.name}").apply { font = Font.font(18.0); textFill = Theme.ON_SURFACE },
            Label(app.description).apply { isWrapText = true; textFill = Theme.ON_SURFACE_SECONDARY }
        )
    }

    private fun createSettingsAppContent() = VBox(12.0).apply {
        padding = Insets(16.0)
        children.add(Label("Configura√ß√µes do Sistema").apply { font = Font.font(18.0); textFill = Theme.ON_SURFACE })
        
        val coppaToggle = CheckBox("Modo COPPA (prote√ß√£o infantil)").apply {
            isSelected = AppState.coppaMode.get()
            textFill = Theme.ON_SURFACE
            selectedProperty().bindBidirectional(AppState.coppaMode)
        }
        val yasaToggle = CheckBox("Modo YASA (recursos avan√ßados)").apply {
            isSelected = AppState.yasaMode.get()
            textFill = Theme.ON_SURFACE
            selectedProperty().bindBidirectional(AppState.yasaMode)
        }
        
        val updatesList = ListView<String>().apply {
            prefHeight = 200.0
            items.setAll(AppState.updates.map { it.title })
            AppState.updates.addListener { _, _, _ -> items.setAll(AppState.updates.map { it.title }) }
        }
        val btnApply = Button("Aplicar Atualiza√ß√µes").apply {
            setOnAction {
                AppState.updates.forEach { it.installed = true }
                AppState.notifications.add(0, NotificationItem("Atualiza√ß√µes", "Todas atualiza√ß√µes instaladas"))
            }
        }
        children.addAll(coppaToggle, yasaToggle, Separator(), Label("Atualiza√ß√µes Dispon√≠veis").apply { textFill = Theme.ON_SURFACE }, updatesList, btnApply)
    }
    
    private fun createStoreAppContent() = VBox(10.0).apply {
        padding = Insets(16.0)
        val storeItems = listOf("Firefox", "Clock Widget", "WeatherPro", "GamesPack", "MusicX")
        val storeList = ListView<String>().apply { items.addAll(storeItems) }
        
        val btnInstall = Button("Instalar Selecionado").apply {
            setOnAction {
                val selected = storeList.selectionModel.selectedItem ?: return@setOnAction
                if (AppState.coppaMode.get()) {
                    AppState.notifications.add(0, NotificationItem("Loja", "Instala√ß√£o bloqueada por COPPA"))
                    return@setOnAction
                }
                val id = selected.lowercase().replace(" ", "-")
                if (AppState.apps.none { it.id == id }) {
                    val newApp = OsApp(id, selected, "Instalado via Loja", "üì¶", false, true)
                    AppState.apps.add(newApp)
                    AppState.notifications.add(0, NotificationItem("Loja", "$selected instalado com sucesso!"))
                } else {
                    AppState.notifications.add(0, NotificationItem("Loja", "$selected j√° est√° instalado."))
                }
            }
        }
        children.addAll(storeList, btnInstall)
    }
}

// ======= APLICA√á√ÉO PRINCIPAL =======
class VentureOSApp : Application() {

    override fun start(primaryStage: Stage) {
        seedInitialData()

        primaryStage.title = "VentureOS - Demo"
        
        // O StackPane √© a base para sobrepor camadas (home, apps, painel de notifica√ß√£o)
        val mainStack = StackPane()
        
        val appUIManager = AppUIManager(mainStack)

        // 1. Tela Inicial (Launcher)
        val homeScreen = BorderPane().apply {
            style = "-fx-background-color: #${Theme.BACKGROUND.toString().substring(2)};"
            
            // Barra de status no topo
            top = TopStatusBar().apply {
                // Clicar na barra de status abre/fecha o painel de notifica√ß√µes
                setOnMouseClicked {
                    (mainStack.children.last() as? NotificationShade)?.toggle()
                }
            }

            // Grade de apps no centro
            center = createLauncherPane(appUIManager)
            
            // Barra de navega√ß√£o na base
            bottom = NavigationBar(appUIManager)
        }

        // 2. Painel de Notifica√ß√µes (fica sobre tudo)
        val notificationShade = NotificationShade()

        mainStack.children.addAll(homeScreen, notificationShade)
        StackPane.setAlignment(notificationShade, Pos.TOP_CENTER)

        // Configura√ß√£o da cena e do palco
        val scene = Scene(mainStack, 1024.0, 768.0)
        primaryStage.scene = scene
        primaryStage.show()

        // Executa tarefas de primeiro boot
        Platform.runLater {
            if (AppState.isFirstBoot()) {
                AutoInstaller.runFirstBootInstall()
                AppState.markFirstBootDone()
            }
        }
    }

    override fun stop() {
        AppState.scheduler.shutdownNow()
    }

    private fun seedInitialData() {
        if (AppState.apps.isEmpty()) {
            AppState.apps.addAll(
                OsApp(id = "settings-app", name = "Configura√ß√µes", description = "Ajustes do sistema", iconUnicode = "‚öôÔ∏è", installed = true),
                OsApp(id = "store-app", name = "Loja", description = "Loja de aplicativos", iconUnicode = "üè¨", installed = true),
                OsApp(id = "files-app", name = "Arquivos", description = "Gerenciador de arquivos", iconUnicode = "üìÅ", installed = true)
            )
        }
        if (AppState.updates.isEmpty()) AppState.updates.addAll(generateDefaultUpdates())
        if (AppState.notifications.isEmpty()) AppState.notifications.add(NotificationItem("Bem-vindo", "Bem-vindo ao VentureOS!"))
    }

    private fun createLauncherPane(appManager: AppUIManager): VBox {
        // Widget de Pesquisa
        val searchBar = TextField().apply {
            promptText = "Pesquisar apps, configura√ß√µes..."
            style = "-fx-background-radius: 20; -fx-background-color: #${Theme.SURFACE.toString().substring(2)}; -fx-text-fill: white;"
        }

        // Grade de apps
        val appGrid = FlowPane().apply {
            padding = Insets(20.0)
            hgap = 16.0
            vgap = 16.0
            alignment = Pos.TOP_CENTER
            AppState.apps.forEach { children.add(AppTile(it, appManager)) }
            // Atualiza a grade quando um novo app √© instalado
            AppState.apps.addListener { _ ->
                children.clear()
                AppState.apps.forEach { children.add(AppTile(it, appManager)) }
            }
        }
        
        return VBox(20.0, searchBar, ScrollPane(appGrid).apply {
            isFitToWidth = true
            style = "-fx-background-color: transparent; -fx-background: transparent;"
        }).apply {
            padding = Insets(20.0)
            alignment = Pos.TOP_CENTER
        }
    }
}

// ======= INSTALADOR AUTOM√ÅTICO (Sem altera√ß√µes) =======
object AutoInstaller {
    fun runFirstBootInstall() {
        Thread {
            Thread.sleep(1500)
            Platform.runLater {
                if (!AppState.coppaMode.get()) {
                    val recommended = listOf("Firefox", "WeatherPro")
                    recommended.forEach { appName ->
                        val id = appName.lowercase().replace(" ", "-")
                        if (AppState.apps.none { it.id == id }) {
                            AppState.apps.add(OsApp(id, appName, "Instalado automaticamente", "üì¶", false, true))
                        }
                    }
                    AppState.notifications.add(0, NotificationItem("Sistema", "Apps recomendados foram instalados."))
                }
            }
        }.start()
    }
}

// ======= PONTO DE ENTRADA =======
fun main(args: Array<String>) {
    Application.launch(VentureOSApp::class.java, *args)
}

            
